import org.gradle.internal.os.OperatingSystem

plugins {
    id "java"
    id "application"                            // for "run" task
    id 'edu.sc.seis.launch4j' version '2.5.1'   // for generating .exe
    id 'org.beryx.runtime' version '1.12.7'     // for generating JRE
   id 'com.github.johnrengelman.shadow' version '7.1.2' //to make linux build 

}

application {
    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        applicationDefaultJvmArgs = ["-XstartOnFirstThread"]
    }
}

launch4j {
    icon = "${projectDir}/favicon.ico"
    mainClassName = 'com.particle_life.app.Main'
    dontWrapJar = true
    bundledJre64Bit = true
    bundledJrePath = "jre"
}

// creates folder "jre"
runtime {
    options = ["--compress", "2"]
    modules = [
            "jdk.zipfs"  // needed for "jar" FileSystemProvider (ZipFileSystemProvider), not detected automatically by plugin
    ]
    additive = true
}

task copyJre (type: Copy) {
    dependsOn tasks.runtime

    from layout.buildDirectory.dir("jre")
    into layout.buildDirectory.dir("app/jre")
}

task copyLaunch4j (type: Copy) {
    dependsOn tasks.createExe

    from layout.buildDirectory.dir("launch4j")
    into layout.buildDirectory.dir("app")
}

task assembleApp {
    dependsOn tasks.copyLaunch4j, tasks.copyJre
}

task zipApp (type: Zip) {
    dependsOn tasks.assembleApp
    from layout.buildDirectory.dir("app")
    destinationDirectory = layout.buildDirectory.dir("zipApp")
    archiveFileName = "particle-life-app.zip"
}

group 'com.particle.life.app'
version '1.0.0'

ext {
    lwjglVersion = '3.3.0'
    imguiVersion = '1.86.2'
}

jar {
    mainClassName = "com.particle_life.app.Main"  // required for "run" task
}

project.ext.lwjglVersion = "3.3.0"

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        def osArch = System.getProperty("os.arch")
        project.ext.natives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
            ? "linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
            : "linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.natives = "macos"
        break
    case OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.natives = osArch.contains("64")
            ? "windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
            : "windows-x86"
        break
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://jitpack.io" }
}

dependencies {

    implementation "com.github.tom-mohr:particle-life:v0.2.0"

    // jOOR
    implementation 'org.jooq:joor:0.9.14'

    // imGui
    implementation "io.github.spair:imgui-java-binding:$imguiVersion"
    implementation "io.github.spair:imgui-java-natives-$natives:$imguiVersion"

    // LWJGL
    
    [".lwjgl", ".assimp", ".bgfx", ".cuda", ".egl", ".glfw", ".jawt", ".jemalloc", ".libdivide", ".llvm", 
     ".lmdb", ".lz4", ".meow", ".nanovg", ".nfd", ".nuklear", ".odbc", ".openal", ".opencl", ".opengl", ".opengles",
     ".opus", ".ovr", ".par", ".remotery", ".rpmalloc", ".shaderc", ".sse", ".stb", ".tinyexr", ".tinyfd",
     ".tootle", ".vma", ".vulkan", ".xxhash", ".yoga", ".zstd"].each {
        implementation "org.lwjgl.osgi:org.lwjgl$it:$lwjglVersion"
    }
}
